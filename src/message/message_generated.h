// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MESSAGE_GOSSIP_MESSAGE_H_
#define FLATBUFFERS_GENERATED_MESSAGE_GOSSIP_MESSAGE_H_

#include "thirdparty/flatbuffers/flatbuffers.h"


namespace gossip {
namespace message {

struct Node;
struct NodeState;
struct NodeStates;
struct Ping;
struct IndirectPing;
struct Pong;

enum STATE {
  STATE_ALIVE = 0,
  STATE_SUSPECT = 1,
  STATE_DEAD = 2
};

inline const char **EnumNamesSTATE() {
  static const char *names[] = { "ALIVE", "SUSPECT", "DEAD", nullptr };
  return names;
}

inline const char *EnumNameSTATE(STATE e) { return EnumNamesSTATE()[static_cast<int>(e)]; }

enum TYPE {
  TYPE_PING = 0,
  TYPE_PONG = 1,
  TYPE_INDIRECTPING = 2,
  TYPE_SYNCSTATE = 3
};

inline const char **EnumNamesTYPE() {
  static const char *names[] = { "PING", "PONG", "INDIRECTPING", "SYNCSTATE", nullptr };
  return names;
}

inline const char *EnumNameTYPE(TYPE e) { return EnumNamesTYPE()[static_cast<int>(e)]; }

struct Node FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  flatbuffers::String *mutable_name() { return GetPointer<flatbuffers::String *>(4); }
  const flatbuffers::String *ip() const { return GetPointer<const flatbuffers::String *>(6); }
  flatbuffers::String *mutable_ip() { return GetPointer<flatbuffers::String *>(6); }
  int16_t port() const { return GetField<int16_t>(8, 0); }
  bool mutate_port(int16_t port) { return SetField(8, port); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* ip */) &&
           verifier.Verify(ip()) &&
           VerifyField<int16_t>(verifier, 8 /* port */) &&
           verifier.EndTable();
  }
};

struct NodeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_ip(flatbuffers::Offset<flatbuffers::String> ip) { fbb_.AddOffset(6, ip); }
  void add_port(int16_t port) { fbb_.AddElement<int16_t>(8, port, 0); }
  NodeBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NodeBuilder &operator=(const NodeBuilder &);
  flatbuffers::Offset<Node> Finish() {
    auto o = flatbuffers::Offset<Node>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Node> CreateNode(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::String> ip = 0,
   int16_t port = 0) {
  NodeBuilder builder_(_fbb);
  builder_.add_ip(ip);
  builder_.add_name(name);
  builder_.add_port(port);
  return builder_.Finish();
}

struct NodeState FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Node *node() const { return GetPointer<const Node *>(4); }
  Node *mutable_node() { return GetPointer<Node *>(4); }
  STATE state() const { return static_cast<STATE>(GetField<int8_t>(6, 0)); }
  bool mutate_state(STATE state) { return SetField(6, static_cast<int8_t>(state)); }
  uint64_t dominant() const { return GetField<uint64_t>(8, 0); }
  bool mutate_dominant(uint64_t dominant) { return SetField(8, dominant); }
  const flatbuffers::String *from() const { return GetPointer<const flatbuffers::String *>(10); }
  flatbuffers::String *mutable_from() { return GetPointer<flatbuffers::String *>(10); }
  uint64_t timeStamp() const { return GetField<uint64_t>(12, 0); }
  bool mutate_timeStamp(uint64_t timeStamp) { return SetField(12, timeStamp); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* node */) &&
           verifier.VerifyTable(node()) &&
           VerifyField<int8_t>(verifier, 6 /* state */) &&
           VerifyField<uint64_t>(verifier, 8 /* dominant */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* from */) &&
           verifier.Verify(from()) &&
           VerifyField<uint64_t>(verifier, 12 /* timeStamp */) &&
           verifier.EndTable();
  }
};

struct NodeStateBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_node(flatbuffers::Offset<Node> node) { fbb_.AddOffset(4, node); }
  void add_state(STATE state) { fbb_.AddElement<int8_t>(6, static_cast<int8_t>(state), 0); }
  void add_dominant(uint64_t dominant) { fbb_.AddElement<uint64_t>(8, dominant, 0); }
  void add_from(flatbuffers::Offset<flatbuffers::String> from) { fbb_.AddOffset(10, from); }
  void add_timeStamp(uint64_t timeStamp) { fbb_.AddElement<uint64_t>(12, timeStamp, 0); }
  NodeStateBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NodeStateBuilder &operator=(const NodeStateBuilder &);
  flatbuffers::Offset<NodeState> Finish() {
    auto o = flatbuffers::Offset<NodeState>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<NodeState> CreateNodeState(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<Node> node = 0,
   STATE state = STATE_ALIVE,
   uint64_t dominant = 0,
   flatbuffers::Offset<flatbuffers::String> from = 0,
   uint64_t timeStamp = 0) {
  NodeStateBuilder builder_(_fbb);
  builder_.add_timeStamp(timeStamp);
  builder_.add_dominant(dominant);
  builder_.add_from(from);
  builder_.add_node(node);
  builder_.add_state(state);
  return builder_.Finish();
}

struct NodeStates FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<NodeState>> *nodes() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<NodeState>> *>(4); }
  flatbuffers::Vector<flatbuffers::Offset<NodeState>> *mutable_nodes() { return GetPointer<flatbuffers::Vector<flatbuffers::Offset<NodeState>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* nodes */) &&
           verifier.Verify(nodes()) &&
           verifier.VerifyVectorOfTables(nodes()) &&
           verifier.EndTable();
  }
};

struct NodeStatesBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_nodes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<NodeState>>> nodes) { fbb_.AddOffset(4, nodes); }
  NodeStatesBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NodeStatesBuilder &operator=(const NodeStatesBuilder &);
  flatbuffers::Offset<NodeStates> Finish() {
    auto o = flatbuffers::Offset<NodeStates>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NodeStates> CreateNodeStates(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<NodeState>>> nodes = 0) {
  NodeStatesBuilder builder_(_fbb);
  builder_.add_nodes(nodes);
  return builder_.Finish();
}

struct Ping FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t seqNo() const { return GetField<uint64_t>(4, 0); }
  bool mutate_seqNo(uint64_t seqNo) { return SetField(4, seqNo); }
  const flatbuffers::String *from() const { return GetPointer<const flatbuffers::String *>(6); }
  flatbuffers::String *mutable_from() { return GetPointer<flatbuffers::String *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* seqNo */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* from */) &&
           verifier.Verify(from()) &&
           verifier.EndTable();
  }
};

struct PingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_seqNo(uint64_t seqNo) { fbb_.AddElement<uint64_t>(4, seqNo, 0); }
  void add_from(flatbuffers::Offset<flatbuffers::String> from) { fbb_.AddOffset(6, from); }
  PingBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PingBuilder &operator=(const PingBuilder &);
  flatbuffers::Offset<Ping> Finish() {
    auto o = flatbuffers::Offset<Ping>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Ping> CreatePing(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t seqNo = 0,
   flatbuffers::Offset<flatbuffers::String> from = 0) {
  PingBuilder builder_(_fbb);
  builder_.add_seqNo(seqNo);
  builder_.add_from(from);
  return builder_.Finish();
}

struct IndirectPing FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t seqNo() const { return GetField<uint64_t>(4, 0); }
  bool mutate_seqNo(uint64_t seqNo) { return SetField(4, seqNo); }
  const Node *target() const { return GetPointer<const Node *>(6); }
  Node *mutable_target() { return GetPointer<Node *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* seqNo */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* target */) &&
           verifier.VerifyTable(target()) &&
           verifier.EndTable();
  }
};

struct IndirectPingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_seqNo(uint64_t seqNo) { fbb_.AddElement<uint64_t>(4, seqNo, 0); }
  void add_target(flatbuffers::Offset<Node> target) { fbb_.AddOffset(6, target); }
  IndirectPingBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  IndirectPingBuilder &operator=(const IndirectPingBuilder &);
  flatbuffers::Offset<IndirectPing> Finish() {
    auto o = flatbuffers::Offset<IndirectPing>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<IndirectPing> CreateIndirectPing(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t seqNo = 0,
   flatbuffers::Offset<Node> target = 0) {
  IndirectPingBuilder builder_(_fbb);
  builder_.add_seqNo(seqNo);
  builder_.add_target(target);
  return builder_.Finish();
}

struct Pong FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint64_t seqNo() const { return GetField<uint64_t>(4, 0); }
  bool mutate_seqNo(uint64_t seqNo) { return SetField(4, seqNo); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* seqNo */) &&
           verifier.EndTable();
  }
};

struct PongBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_seqNo(uint64_t seqNo) { fbb_.AddElement<uint64_t>(4, seqNo, 0); }
  PongBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PongBuilder &operator=(const PongBuilder &);
  flatbuffers::Offset<Pong> Finish() {
    auto o = flatbuffers::Offset<Pong>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<Pong> CreatePong(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t seqNo = 0) {
  PongBuilder builder_(_fbb);
  builder_.add_seqNo(seqNo);
  return builder_.Finish();
}

inline const gossip::message::NodeStates *GetNodeStates(const void *buf) { return flatbuffers::GetRoot<gossip::message::NodeStates>(buf); }

inline NodeStates *GetMutableNodeStates(void *buf) { return flatbuffers::GetMutableRoot<NodeStates>(buf); }

inline bool VerifyNodeStatesBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<gossip::message::NodeStates>(); }

inline void FinishNodeStatesBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<gossip::message::NodeStates> root) { fbb.Finish(root); }

}  // namespace message
}  // namespace gossip

#endif  // FLATBUFFERS_GENERATED_MESSAGE_GOSSIP_MESSAGE_H_
