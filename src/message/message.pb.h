// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace message {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class alive;
class aliveDefaultTypeInternal;
extern aliveDefaultTypeInternal _alive_default_instance_;
class dead;
class deadDefaultTypeInternal;
extern deadDefaultTypeInternal _dead_default_instance_;
class indirentPing;
class indirentPingDefaultTypeInternal;
extern indirentPingDefaultTypeInternal _indirentPing_default_instance_;
class node;
class nodeDefaultTypeInternal;
extern nodeDefaultTypeInternal _node_default_instance_;
class nodeState;
class nodeStateDefaultTypeInternal;
extern nodeStateDefaultTypeInternal _nodeState_default_instance_;
class ping;
class pingDefaultTypeInternal;
extern pingDefaultTypeInternal _ping_default_instance_;
class suspect;
class suspectDefaultTypeInternal;
extern suspectDefaultTypeInternal _suspect_default_instance_;
}  // namespace message

namespace message {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_message_2eproto();
void protobuf_InitDefaults_message_2eproto();

enum STATE {
  ALIVE = 0,
  SUSPECT = 1,
  DEAD = 2,
  STATE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  STATE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool STATE_IsValid(int value);
const STATE STATE_MIN = ALIVE;
const STATE STATE_MAX = DEAD;
const int STATE_ARRAYSIZE = STATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* STATE_descriptor();
inline const ::std::string& STATE_Name(STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    STATE_descriptor(), value);
}
inline bool STATE_Parse(
    const ::std::string& name, STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<STATE>(
    STATE_descriptor(), name, value);
}
// ===================================================================

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  inline Header* New() const PROTOBUF_FINAL { return New(NULL); }

  Header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // fixed32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // fixed32 length = 2;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  ::google::protobuf::uint32 length() const;
  void set_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:message.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 length_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

};
// -------------------------------------------------------------------

class node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.node) */ {
 public:
  node();
  virtual ~node();

  node(const node& from);

  inline node& operator=(const node& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const node& default_instance();

  static inline const node* internal_default_instance() {
    return reinterpret_cast<const node*>(
               &_node_default_instance_);
  }

  void Swap(node* other);

  // implements Message ----------------------------------------------

  inline node* New() const PROTOBUF_FINAL { return New(NULL); }

  node* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const node& from);
  void MergeFrom(const node& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string IP = 2;
  void clear_ip();
  static const int kIPFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // uint32 Port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:message.node)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

};
// -------------------------------------------------------------------

class nodeState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.nodeState) */ {
 public:
  nodeState();
  virtual ~nodeState();

  nodeState(const nodeState& from);

  inline nodeState& operator=(const nodeState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nodeState& default_instance();

  static inline const nodeState* internal_default_instance() {
    return reinterpret_cast<const nodeState*>(
               &_nodeState_default_instance_);
  }

  void Swap(nodeState* other);

  // implements Message ----------------------------------------------

  inline nodeState* New() const PROTOBUF_FINAL { return New(NULL); }

  nodeState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const nodeState& from);
  void MergeFrom(const nodeState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(nodeState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .message.node Node = 1;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  const ::message::node& node() const;
  ::message::node* mutable_node();
  ::message::node* release_node();
  void set_allocated_node(::message::node* node);

  // uint64 Dominant = 2;
  void clear_dominant();
  static const int kDominantFieldNumber = 2;
  ::google::protobuf::uint64 dominant() const;
  void set_dominant(::google::protobuf::uint64 value);

  // .message.STATE State = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::message::STATE state() const;
  void set_state(::message::STATE value);

  // uint64 Timestamp = 4;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:message.nodeState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::message::node* node_;
  ::google::protobuf::uint64 dominant_;
  ::google::protobuf::uint64 timestamp_;
  int state_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

};
// -------------------------------------------------------------------

class alive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.alive) */ {
 public:
  alive();
  virtual ~alive();

  alive(const alive& from);

  inline alive& operator=(const alive& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const alive& default_instance();

  static inline const alive* internal_default_instance() {
    return reinterpret_cast<const alive*>(
               &_alive_default_instance_);
  }

  void Swap(alive* other);

  // implements Message ----------------------------------------------

  inline alive* New() const PROTOBUF_FINAL { return New(NULL); }

  alive* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const alive& from);
  void MergeFrom(const alive& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(alive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .message.node Node = 1;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  const ::message::node& node() const;
  ::message::node* mutable_node();
  ::message::node* release_node();
  void set_allocated_node(::message::node* node);

  // uint64 Dominant = 2;
  void clear_dominant();
  static const int kDominantFieldNumber = 2;
  ::google::protobuf::uint64 dominant() const;
  void set_dominant(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:message.alive)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::message::node* node_;
  ::google::protobuf::uint64 dominant_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

};
// -------------------------------------------------------------------

class suspect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.suspect) */ {
 public:
  suspect();
  virtual ~suspect();

  suspect(const suspect& from);

  inline suspect& operator=(const suspect& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const suspect& default_instance();

  static inline const suspect* internal_default_instance() {
    return reinterpret_cast<const suspect*>(
               &_suspect_default_instance_);
  }

  void Swap(suspect* other);

  // implements Message ----------------------------------------------

  inline suspect* New() const PROTOBUF_FINAL { return New(NULL); }

  suspect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const suspect& from);
  void MergeFrom(const suspect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(suspect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .message.node Node = 1;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  const ::message::node& node() const;
  ::message::node* mutable_node();
  ::message::node* release_node();
  void set_allocated_node(::message::node* node);

  // uint64 Dominant = 2;
  void clear_dominant();
  static const int kDominantFieldNumber = 2;
  ::google::protobuf::uint64 dominant() const;
  void set_dominant(::google::protobuf::uint64 value);

  // string From = 3;
  void clear_from();
  static const int kFromFieldNumber = 3;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // @@protoc_insertion_point(class_scope:message.suspect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::message::node* node_;
  ::google::protobuf::uint64 dominant_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

};
// -------------------------------------------------------------------

class dead : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.dead) */ {
 public:
  dead();
  virtual ~dead();

  dead(const dead& from);

  inline dead& operator=(const dead& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dead& default_instance();

  static inline const dead* internal_default_instance() {
    return reinterpret_cast<const dead*>(
               &_dead_default_instance_);
  }

  void Swap(dead* other);

  // implements Message ----------------------------------------------

  inline dead* New() const PROTOBUF_FINAL { return New(NULL); }

  dead* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const dead& from);
  void MergeFrom(const dead& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(dead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .message.node Node = 1;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  const ::message::node& node() const;
  ::message::node* mutable_node();
  ::message::node* release_node();
  void set_allocated_node(::message::node* node);

  // uint64 Dominant = 2;
  void clear_dominant();
  static const int kDominantFieldNumber = 2;
  ::google::protobuf::uint64 dominant() const;
  void set_dominant(::google::protobuf::uint64 value);

  // string From = 3;
  void clear_from();
  static const int kFromFieldNumber = 3;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // @@protoc_insertion_point(class_scope:message.dead)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::message::node* node_;
  ::google::protobuf::uint64 dominant_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

};
// -------------------------------------------------------------------

class ping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.ping) */ {
 public:
  ping();
  virtual ~ping();

  ping(const ping& from);

  inline ping& operator=(const ping& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ping& default_instance();

  static inline const ping* internal_default_instance() {
    return reinterpret_cast<const ping*>(
               &_ping_default_instance_);
  }

  void Swap(ping* other);

  // implements Message ----------------------------------------------

  inline ping* New() const PROTOBUF_FINAL { return New(NULL); }

  ping* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ping& from);
  void MergeFrom(const ping& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ping* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 SeqNo = 1;
  void clear_seqno();
  static const int kSeqNoFieldNumber = 1;
  ::google::protobuf::uint64 seqno() const;
  void set_seqno(::google::protobuf::uint64 value);

  // string From = 2;
  void clear_from();
  static const int kFromFieldNumber = 2;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // @@protoc_insertion_point(class_scope:message.ping)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::uint64 seqno_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

};
// -------------------------------------------------------------------

class indirentPing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:message.indirentPing) */ {
 public:
  indirentPing();
  virtual ~indirentPing();

  indirentPing(const indirentPing& from);

  inline indirentPing& operator=(const indirentPing& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const indirentPing& default_instance();

  static inline const indirentPing* internal_default_instance() {
    return reinterpret_cast<const indirentPing*>(
               &_indirentPing_default_instance_);
  }

  void Swap(indirentPing* other);

  // implements Message ----------------------------------------------

  inline indirentPing* New() const PROTOBUF_FINAL { return New(NULL); }

  indirentPing* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const indirentPing& from);
  void MergeFrom(const indirentPing& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(indirentPing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 SeqNo = 1;
  void clear_seqno();
  static const int kSeqNoFieldNumber = 1;
  ::google::protobuf::uint64 seqno() const;
  void set_seqno(::google::protobuf::uint64 value);

  // .message.node Target = 2;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 2;
  const ::message::node& target() const;
  ::message::node* mutable_target();
  ::message::node* release_target();
  void set_allocated_target(::message::node* target);

  // @@protoc_insertion_point(class_scope:message.indirentPing)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::message::node* target_;
  ::google::protobuf::uint64 seqno_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// fixed32 type = 1;
inline void Header::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 Header::type() const {
  // @@protoc_insertion_point(field_get:message.Header.type)
  return type_;
}
inline void Header::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:message.Header.type)
}

// fixed32 length = 2;
inline void Header::clear_length() {
  length_ = 0u;
}
inline ::google::protobuf::uint32 Header::length() const {
  // @@protoc_insertion_point(field_get:message.Header.length)
  return length_;
}
inline void Header::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:message.Header.length)
}

// -------------------------------------------------------------------

// node

// string Name = 1;
inline void node::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& node::name() const {
  // @@protoc_insertion_point(field_get:message.node.Name)
  return name_.GetNoArena();
}
inline void node::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.node.Name)
}
#if LANG_CXX11
inline void node::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.node.Name)
}
#endif
inline void node::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.node.Name)
}
inline void node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.node.Name)
}
inline ::std::string* node::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:message.node.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* node::release_name() {
  // @@protoc_insertion_point(field_release:message.node.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void node::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:message.node.Name)
}

// string IP = 2;
inline void node::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& node::ip() const {
  // @@protoc_insertion_point(field_get:message.node.IP)
  return ip_.GetNoArena();
}
inline void node::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.node.IP)
}
#if LANG_CXX11
inline void node::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.node.IP)
}
#endif
inline void node::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.node.IP)
}
inline void node::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.node.IP)
}
inline ::std::string* node::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:message.node.IP)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* node::release_ip() {
  // @@protoc_insertion_point(field_release:message.node.IP)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void node::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:message.node.IP)
}

// uint32 Port = 3;
inline void node::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 node::port() const {
  // @@protoc_insertion_point(field_get:message.node.Port)
  return port_;
}
inline void node::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:message.node.Port)
}

// -------------------------------------------------------------------

// nodeState

// .message.node Node = 1;
inline bool nodeState::has_node() const {
  return this != internal_default_instance() && node_ != NULL;
}
inline void nodeState::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
inline const ::message::node& nodeState::node() const {
  // @@protoc_insertion_point(field_get:message.nodeState.Node)
  return node_ != NULL ? *node_
                         : *::message::node::internal_default_instance();
}
inline ::message::node* nodeState::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::message::node;
  }
  // @@protoc_insertion_point(field_mutable:message.nodeState.Node)
  return node_;
}
inline ::message::node* nodeState::release_node() {
  // @@protoc_insertion_point(field_release:message.nodeState.Node)
  
  ::message::node* temp = node_;
  node_ = NULL;
  return temp;
}
inline void nodeState::set_allocated_node(::message::node* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.nodeState.Node)
}

// uint64 Dominant = 2;
inline void nodeState::clear_dominant() {
  dominant_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 nodeState::dominant() const {
  // @@protoc_insertion_point(field_get:message.nodeState.Dominant)
  return dominant_;
}
inline void nodeState::set_dominant(::google::protobuf::uint64 value) {
  
  dominant_ = value;
  // @@protoc_insertion_point(field_set:message.nodeState.Dominant)
}

// .message.STATE State = 3;
inline void nodeState::clear_state() {
  state_ = 0;
}
inline ::message::STATE nodeState::state() const {
  // @@protoc_insertion_point(field_get:message.nodeState.State)
  return static_cast< ::message::STATE >(state_);
}
inline void nodeState::set_state(::message::STATE value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:message.nodeState.State)
}

// uint64 Timestamp = 4;
inline void nodeState::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 nodeState::timestamp() const {
  // @@protoc_insertion_point(field_get:message.nodeState.Timestamp)
  return timestamp_;
}
inline void nodeState::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:message.nodeState.Timestamp)
}

// -------------------------------------------------------------------

// alive

// .message.node Node = 1;
inline bool alive::has_node() const {
  return this != internal_default_instance() && node_ != NULL;
}
inline void alive::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
inline const ::message::node& alive::node() const {
  // @@protoc_insertion_point(field_get:message.alive.Node)
  return node_ != NULL ? *node_
                         : *::message::node::internal_default_instance();
}
inline ::message::node* alive::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::message::node;
  }
  // @@protoc_insertion_point(field_mutable:message.alive.Node)
  return node_;
}
inline ::message::node* alive::release_node() {
  // @@protoc_insertion_point(field_release:message.alive.Node)
  
  ::message::node* temp = node_;
  node_ = NULL;
  return temp;
}
inline void alive::set_allocated_node(::message::node* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.alive.Node)
}

// uint64 Dominant = 2;
inline void alive::clear_dominant() {
  dominant_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 alive::dominant() const {
  // @@protoc_insertion_point(field_get:message.alive.Dominant)
  return dominant_;
}
inline void alive::set_dominant(::google::protobuf::uint64 value) {
  
  dominant_ = value;
  // @@protoc_insertion_point(field_set:message.alive.Dominant)
}

// -------------------------------------------------------------------

// suspect

// .message.node Node = 1;
inline bool suspect::has_node() const {
  return this != internal_default_instance() && node_ != NULL;
}
inline void suspect::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
inline const ::message::node& suspect::node() const {
  // @@protoc_insertion_point(field_get:message.suspect.Node)
  return node_ != NULL ? *node_
                         : *::message::node::internal_default_instance();
}
inline ::message::node* suspect::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::message::node;
  }
  // @@protoc_insertion_point(field_mutable:message.suspect.Node)
  return node_;
}
inline ::message::node* suspect::release_node() {
  // @@protoc_insertion_point(field_release:message.suspect.Node)
  
  ::message::node* temp = node_;
  node_ = NULL;
  return temp;
}
inline void suspect::set_allocated_node(::message::node* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.suspect.Node)
}

// uint64 Dominant = 2;
inline void suspect::clear_dominant() {
  dominant_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 suspect::dominant() const {
  // @@protoc_insertion_point(field_get:message.suspect.Dominant)
  return dominant_;
}
inline void suspect::set_dominant(::google::protobuf::uint64 value) {
  
  dominant_ = value;
  // @@protoc_insertion_point(field_set:message.suspect.Dominant)
}

// string From = 3;
inline void suspect::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& suspect::from() const {
  // @@protoc_insertion_point(field_get:message.suspect.From)
  return from_.GetNoArena();
}
inline void suspect::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.suspect.From)
}
#if LANG_CXX11
inline void suspect::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.suspect.From)
}
#endif
inline void suspect::set_from(const char* value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.suspect.From)
}
inline void suspect::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.suspect.From)
}
inline ::std::string* suspect::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:message.suspect.From)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* suspect::release_from() {
  // @@protoc_insertion_point(field_release:message.suspect.From)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void suspect::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:message.suspect.From)
}

// -------------------------------------------------------------------

// dead

// .message.node Node = 1;
inline bool dead::has_node() const {
  return this != internal_default_instance() && node_ != NULL;
}
inline void dead::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
inline const ::message::node& dead::node() const {
  // @@protoc_insertion_point(field_get:message.dead.Node)
  return node_ != NULL ? *node_
                         : *::message::node::internal_default_instance();
}
inline ::message::node* dead::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::message::node;
  }
  // @@protoc_insertion_point(field_mutable:message.dead.Node)
  return node_;
}
inline ::message::node* dead::release_node() {
  // @@protoc_insertion_point(field_release:message.dead.Node)
  
  ::message::node* temp = node_;
  node_ = NULL;
  return temp;
}
inline void dead::set_allocated_node(::message::node* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.dead.Node)
}

// uint64 Dominant = 2;
inline void dead::clear_dominant() {
  dominant_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 dead::dominant() const {
  // @@protoc_insertion_point(field_get:message.dead.Dominant)
  return dominant_;
}
inline void dead::set_dominant(::google::protobuf::uint64 value) {
  
  dominant_ = value;
  // @@protoc_insertion_point(field_set:message.dead.Dominant)
}

// string From = 3;
inline void dead::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& dead::from() const {
  // @@protoc_insertion_point(field_get:message.dead.From)
  return from_.GetNoArena();
}
inline void dead::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.dead.From)
}
#if LANG_CXX11
inline void dead::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.dead.From)
}
#endif
inline void dead::set_from(const char* value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.dead.From)
}
inline void dead::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.dead.From)
}
inline ::std::string* dead::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:message.dead.From)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* dead::release_from() {
  // @@protoc_insertion_point(field_release:message.dead.From)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void dead::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:message.dead.From)
}

// -------------------------------------------------------------------

// ping

// uint64 SeqNo = 1;
inline void ping::clear_seqno() {
  seqno_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ping::seqno() const {
  // @@protoc_insertion_point(field_get:message.ping.SeqNo)
  return seqno_;
}
inline void ping::set_seqno(::google::protobuf::uint64 value) {
  
  seqno_ = value;
  // @@protoc_insertion_point(field_set:message.ping.SeqNo)
}

// string From = 2;
inline void ping::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ping::from() const {
  // @@protoc_insertion_point(field_get:message.ping.From)
  return from_.GetNoArena();
}
inline void ping::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:message.ping.From)
}
#if LANG_CXX11
inline void ping::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:message.ping.From)
}
#endif
inline void ping::set_from(const char* value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:message.ping.From)
}
inline void ping::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:message.ping.From)
}
inline ::std::string* ping::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:message.ping.From)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ping::release_from() {
  // @@protoc_insertion_point(field_release:message.ping.From)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ping::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:message.ping.From)
}

// -------------------------------------------------------------------

// indirentPing

// uint64 SeqNo = 1;
inline void indirentPing::clear_seqno() {
  seqno_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 indirentPing::seqno() const {
  // @@protoc_insertion_point(field_get:message.indirentPing.SeqNo)
  return seqno_;
}
inline void indirentPing::set_seqno(::google::protobuf::uint64 value) {
  
  seqno_ = value;
  // @@protoc_insertion_point(field_set:message.indirentPing.SeqNo)
}

// .message.node Target = 2;
inline bool indirentPing::has_target() const {
  return this != internal_default_instance() && target_ != NULL;
}
inline void indirentPing::clear_target() {
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;
}
inline const ::message::node& indirentPing::target() const {
  // @@protoc_insertion_point(field_get:message.indirentPing.Target)
  return target_ != NULL ? *target_
                         : *::message::node::internal_default_instance();
}
inline ::message::node* indirentPing::mutable_target() {
  
  if (target_ == NULL) {
    target_ = new ::message::node;
  }
  // @@protoc_insertion_point(field_mutable:message.indirentPing.Target)
  return target_;
}
inline ::message::node* indirentPing::release_target() {
  // @@protoc_insertion_point(field_release:message.indirentPing.Target)
  
  ::message::node* temp = target_;
  target_ = NULL;
  return temp;
}
inline void indirentPing::set_allocated_target(::message::node* target) {
  delete target_;
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:message.indirentPing.Target)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace message

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::message::STATE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::STATE>() {
  return ::message::STATE_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
